
#
# Default Settings
#

#
spring.jackson.serialization.write_dates_as_timestamps: false


# Actuator Endpoints

endpoints:
  actuator:
    sensitive: false


# DB Settings (default is h2)

spring:
  datasource:
    driver-class-name: org.h2.Driver
    test-while-idle: true
    validation-query: SELECT 1

# Show or not log for each sql query
  jpa:
    show-sql: true

# Hibernate ddl auto (create, create-drop, update)
    hibernate:
      ddl-auto: create-drop





---

#
# AWS Settings (activate with Spring profile 'aws')
#

spring:
  profiles: aws

# DB Settings (MySQL on AWS)

  # DataSource settings: set here your own configurations for the database
  # connection. In this example we have "netgloo_blog" as database name and
  # "root" as username and password.
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://aaogfvosgywlmq.cp0yfgjd2jwq.us-east-2.rds.amazonaws.com:3306/devcon_agenda_db
    username: devcon
    password: set-password-from-external-config


# Naming strategy
  jpa:
    hibernate:
      # Hibernate ddl auto (create, create-drop, update)
      ddl-auto: update
      naming.strategy: org.hibernate.cfg.ImprovedNamingStrategy

    # Use spring.jpa.properties.* for Hibernate native properties (the prefix is
    # stripped before adding them to the entity manager)

    # The SQL dialect makes Hibernate generate better SQL for the chosen database
    properties:
      hibernate.dialect: org.hibernate.dialect.MySQL5Dialect

# Actuator Endpoints

# make endpoints sensitive by default
endpoints:
  actuator:
    sensitive: true

# make some endpoints none sensitive
  mappings:
    sensitive: false
  trace:
    sensitive: false
  metrics:
    sensitive: false

# disable some endpoints
  env:
    enabled: false
  heapdump:
    enabled: false
  auditevents:
    enabled: false
  configprops:
    enabled: false
  dump:
    enabled: false
  beans:
    enabled: false
  loggers:
    enabled: false
  autoconfig:
    enabled: false
